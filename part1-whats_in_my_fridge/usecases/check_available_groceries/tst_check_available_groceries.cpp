#include <QtTest>
#include <QCoreApplication>

// add necessary includes here

class Usecases_check_available_groceries : public QObject
{
    Q_OBJECT

public:
    Usecases_check_available_groceries();
    ~Usecases_check_available_groceries();

private slots:
    void one_or_more_grocery_items_available();

};

Usecases_check_available_groceries::Usecases_check_available_groceries()
{

}

Usecases_check_available_groceries::~Usecases_check_available_groceries()
{

}

/* *
 * The QVERIFY2 macro checks the truth value of the first argument, and,
 * in case it is false, it prints the message contained in the second
 * argument.
 *
 * Check out the QTest Namespace MACROS
 * https://doc.qt.io/qt-5/qtest.html#macros
 *
 * */

void Usecases_check_available_groceries::one_or_more_grocery_items_available()
{
    // Given there is a list of available grocery items
    //QFAIL("Not implemented");
    auto groceryItems = new entities::GroceryItems(this);
    QVERIFY(groceryIems);

    // And one or more grocery items are actually available
    // QFAIL("Not implemented");
    auto groceryItemsRepoDummy = new repositories::GroceryItemsRepoDummy(groceryItems);
    groceryItems->setRepository(groceryItemsRepoDummy);
    QVERIFY(groceryItemsRepoDummy->count() > 0);


    // When I check available groceries
    QFAIL("Not implemented");
    // Then I am given the list of available grocery items
    QFAIL("Not implemented");
    // And the grocery items are ordered by name, ascending
    QFAIL("Not implemented");
}

QTEST_MAIN(Usecases_check_available_groceries);  // provides a default main function to call in order to run the test

#include "tst_check_available_groceries.moc"    // explicitly includes the meta-code file generated by Qt.
